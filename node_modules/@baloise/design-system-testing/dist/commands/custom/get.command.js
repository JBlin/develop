"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var selectors_1 = require("../../selectors");
var helpers_1 = require("../helpers");
Cypress.Commands.add('getByTestId', function (testID, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    var element = cy.get((0, selectors_1.byTestId)(testID), o).waitForComponents(o);
    element.then(o, function ($el) { return (0, helpers_1.log)('getByTestId', testID, $el, options); });
    return element;
});
Cypress.Commands.add('getDescribingElement', { prevSubject: ['element'] }, function (subject, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    return cy.wrap(subject, o).then(function (subjectElement) {
        var ariaDescribedBy = subjectElement.attr('aria-describedby');
        if (ariaDescribedBy) {
            return cy
                .get("[id=\"".concat(ariaDescribedBy, "\"]"), o)
                .then(o, function ($el) { return (0, helpers_1.log)('-getDescribingElement', ariaDescribedBy, $el, options); });
        }
        else {
            throw new Error("The subject element does not have an aria-describedby attribute.");
        }
    });
});
Cypress.Commands.add('shouldBeInvalid', { prevSubject: ['element'] }, function (subject, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    cy.wrap(subject, o).should('have.attr', 'aria-invalid', 'true');
});
Cypress.Commands.add('shouldBeValid', { prevSubject: ['element'] }, function (subject, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    cy.wrap(subject, o).should('not.have.attr', 'aria-invalid', 'true');
});
Cypress.Commands.add('getByLabelText', { prevSubject: ['optional'] }, function (subject, labelText, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    if (subject) {
        return cy
            .wrap(subject, o)
            .contains('label', labelText, o)
            .invoke(o, 'attr', 'for')
            .then(function (forAttributeValue) {
            return cy.get("input[id=\"".concat(forAttributeValue, "\"], textarea[id=\"").concat(forAttributeValue, "\"]"), o);
        })
            .then(o, function ($el) { return (0, helpers_1.log)(!!subject ? '-getByLabelText' : 'getByLabelText', labelText, $el, options); });
    }
    else {
        return cy
            .contains('label', labelText, o)
            .invoke(o, 'attr', 'for')
            .then(function (forAttributeValue) {
            return cy.get("input[id=\"".concat(forAttributeValue, "\"], textarea[id=\"").concat(forAttributeValue, "\"]"), o);
        })
            .then(o, function ($el) { return (0, helpers_1.log)(!!subject ? '-getByLabelText' : 'getByLabelText', labelText, $el, options); });
    }
});
Cypress.Commands.add('getByPlaceholder', {
    prevSubject: ['optional'],
}, function (subject, placeholder, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    var element = subject
        ? cy
            .wrap(subject, o)
            .find("input[placeholder=\"".concat(placeholder, "\"], textarea[placeholder=\"").concat(placeholder, "\"]"), o)
            .waitForComponents(o)
        : cy.get("input[placeholder=\"".concat(placeholder, "\"], textarea[placeholder=\"").concat(placeholder, "\"]"), o).waitForComponents(o);
    element.then(o, function ($el) { return (0, helpers_1.log)(!!subject ? '-getByPlaceholder' : 'getByPlaceholder', placeholder, $el, options); });
    return element;
});
Cypress.Commands.add('getByRole', {
    prevSubject: 'optional',
}, function (subject, role, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    function findElements() {
        return subject ? cy.wrap(subject, o).find("".concat(role, ", [role=\"").concat(role, "\"]"), o) : cy.get("".concat(role, ", [role=\"").concat(role, "\"]"), o);
    }
    function filterVisibleElements(elements) {
        return elements.filter(function (_index, element) {
            var isElementAriaHidden = options.hidden === true ? false : !!Cypress.$(element).attr('aria-hidden');
            return !isElementAriaHidden;
        }, o);
    }
    function filterLabeling(elements) {
        return elements.filter(function (_index, element) { return (0, helpers_1.checkAriaLabel)(element, options.name); }, o);
    }
    var elements = findElements();
    var visibleElements = filterVisibleElements(elements);
    var labeledElements = filterLabeling(visibleElements);
    var firstElement = labeledElements.first(o).waitForComponents(o);
    firstElement.then(o, function ($el) {
        return (0, helpers_1.log)(!!subject ? '-getByRole' : 'getByRole', "".concat(role, " ").concat(JSON.stringify(options)), $el, options);
    });
    return firstElement;
});
Cypress.Commands.add('getControl', {
    prevSubject: ['element'],
}, function (subject, labelText, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    var clearedLabelText = "".concat(labelText || '').trim();
    return cy
        .wrap(subject, o)
        .invoke(o, 'attr', 'id')
        .then(function (id) { return cy.get("button[aria-controls=\"".concat(id, "\"]"), o); })
        .filter(function (_index, element) { return (0, helpers_1.checkAriaLabel)(element, clearedLabelText); }, o)
        .then(o, function ($el) { return (0, helpers_1.log)('-getControl', "".concat(labelText), $el, options); });
});
