"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = require("../helpers");
var selectors_1 = require("../../selectors");
Cypress.Commands.add('balSelectFindOptions', {
    prevSubject: true,
}, function (subject, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    return cy
        .wrapComponent(subject, o)
        .find(selectors_1.selectors.select.options, o)
        .then(function ($el) {
        (0, helpers_1.log)('balSelectFindOptions', '', $el, options);
        return $el;
    })
        .waitForComponents(o);
});
Cypress.Commands.add('balSelectShouldHaveOptions', {
    prevSubject: true,
}, function (subject, labels, dataKey, options) {
    if (dataKey === void 0) { dataKey = 'label'; }
    (0, helpers_1.log)('balAccordionIsOpen', '', subject, options);
    var o = (0, helpers_1.wrapOptions)(options);
    return cy
        .wrapComponent(subject, o)
        .balSelectFindOptions(o)
        .should(function ($o) {
        var dataItems = $o.map(function (_, el) { return Cypress.$(el).attr("data-".concat(dataKey)); });
        expect(dataItems.get()).to.deep.eq(labels);
    });
});
Cypress.Commands.add('balSelectFindChips', {
    prevSubject: true,
}, function (subject, options) {
    var o = (0, helpers_1.wrapOptions)(options);
    return cy
        .wrapComponent(subject, o)
        .find(selectors_1.selectors.select.chips, o)
        .then(function ($el) {
        (0, helpers_1.log)('balSelectFindChips', '', $el, options);
        return $el;
    })
        .waitForComponents(o);
});
