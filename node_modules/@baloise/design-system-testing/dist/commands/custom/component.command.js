"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = require("../helpers");
Cypress.Commands.add('waitForComponents', {
    prevSubject: 'optional',
}, function (subject, options) {
    cy.document({ log: false }).then(function (document) { return document.fonts.ready; });
    (0, helpers_1.log)('waitForComponents', '', subject, options);
    var o = (0, helpers_1.wrapOptions)(options);
    return cy
        .wrap(subject, o)
        .then(function ($el) { return (0, helpers_1.areComponentsReady)($el); })
        .then(function () { return (0, helpers_1.waitAfterFramePaint)(); })
        .then(function () { return (0, helpers_1.waitAfterIdleCallback)(); })
        .wrap(subject, o);
});
Cypress.Commands.add('wrapComponent', {
    prevSubject: false,
}, function (element, options) {
    (0, helpers_1.log)('wrapComponent', '', element, options);
    var o = (0, helpers_1.wrapOptions)(options);
    return cy.wrap(element, o);
});
Cypress.Commands.add('getComponent', {
    prevSubject: false,
}, function (selector, options) {
    (0, helpers_1.log)('getComponent', selector, null, options);
    var o = (0, helpers_1.wrapOptions)(options);
    return cy.get(selector, o).waitForComponents(o);
});
Cypress.Commands.add('disableAnimation', function () {
    cy.window({ log: false }).then(function (win) {
        ;
        win.BaloiseDesignSystem.config.animated = false;
    });
});
Cypress.Commands.add('disableLogger', function () {
    cy.window({ log: false }).then(function (win) {
        ;
        win.BaloiseDesignSystem.config.logger = {
            components: [],
            event: false,
            lifecycle: false,
            render: false,
            custom: false,
        };
    });
});
Cypress.Commands.add('waitForDesignSystem', function () {
    cy.document({ log: false }).then(function (document) { return document.fonts.ready; });
    cy.get('bal-app,.bal-app', { log: false })
        .first({ log: false })
        .then(function ($app) {
        Cypress.log({
            type: 'parent',
            $el: $app,
            displayName: 'bal-app',
            message: 'wait for DesignSystem to be ready',
        });
    })
        .waitForComponents({ log: false })
        .invoke({ log: false }, 'attr', 'ready')
        .should(function ($el) {
        expect($el, 'if bal-app is ready').to.eq('');
    })
        .disableAnimation()
        .disableLogger();
    cy.get('bal-app,.bal-app', { log: false })
        .first({ log: false })
        .then(function ($app) {
        Cypress.log({
            type: 'parent',
            $el: $app,
            displayName: 'bal-app',
            message: 'DesignSystem is ready ðŸš€',
        });
    })
        .then(function () { return (0, helpers_1.waitAfterFramePaint)(); })
        .then(function () { return (0, helpers_1.waitAfterIdleCallback)(); });
});
