/// <reference types="cypress" />
/// <reference types="jquery" />
export declare type Platforms = 'mobile' | 'tablet' | 'touch' | 'desktop' | 'highDefinition' | 'widescreen' | 'fullhd';
export declare const deepReady: (el: any | undefined, full?: boolean) => Promise<void>;
export declare const rIC: (callback: () => void) => void;
export declare const waitAfterFramePaint: () => Promise<unknown>;
export declare const waitAfterIdleCallback: () => Promise<unknown>;
export declare const raf: (h: any) => any;
export declare const runHighPrioritizedTask: (callback: (value: unknown) => void) => void;
/**
 * Helper fn to identify the element/component
 */
export declare type isElementType = (el: Cypress.Chainable<JQuery>) => boolean;
export declare const isElement: (el: Cypress.Chainable<JQuery>, name: string) => boolean;
export declare const hasClass: (el: Cypress.Chainable<JQuery>, name: string) => boolean;
export declare const hasTestId: (el: Cypress.Chainable<JQuery>, testId: string) => boolean;
export declare const isLabel: isElementType;
export declare const isAccordion: isElementType;
export declare const isButton: isElementType;
export declare const isCheckbox: isElementType;
export declare const isDatepicker: isElementType;
export declare const isNumberInput: isElementType;
export declare const isModal: isElementType;
export declare const isRadioGroup: isElementType;
export declare const isRadio: isElementType;
export declare const isSelect: isElementType;
export declare const isTag: isElementType;
export declare const isTabs: isElementType;
export declare const isSteps: isElementType;
export declare const isSlider: isElementType;
export declare const isHint: isElementType;
export declare const isTextarea: isElementType;
export declare const isCardTitle: isElementType;
export declare const isHeading: isElementType;
export declare const isText: isElementType;
export declare const isInputStepper: isElementType;
export declare const isInput: isElementType;
export declare const isInputDate: isElementType;
/**
 * Executes a command on a child element and wraps back to the main element/component
 */
export declare const wrapOptions: (options: any) => any;
export declare const wrapCommand: (displayName: string, element: Cypress.Chainable<JQuery>, message: any, fn: ($el: any) => Cypress.Chainable<JQuery> | void) => (selector: string) => Cypress.Chainable<JQuery<HTMLElement>>;
export declare const shouldLog: (options?: Partial<Cypress.Loggable>) => boolean;
export declare const log: (displayName: string, message: any, $el: any, options?: Partial<Cypress.Loggable>) => void;
export declare const areComponentsReady: ($el: any) => Promise<any[]>;
export declare const testOnPlatforms: (platforms: Platforms[], fn: (platform: Platforms) => Promise<void> | void) => void;
export declare function checkAriaLabel(element: any, label: any): boolean;
