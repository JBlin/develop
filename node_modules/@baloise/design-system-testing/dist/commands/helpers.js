"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkAriaLabel = exports.testOnPlatforms = exports.areComponentsReady = exports.log = exports.shouldLog = exports.wrapCommand = exports.wrapOptions = exports.isInputDate = exports.isInput = exports.isInputStepper = exports.isText = exports.isHeading = exports.isCardTitle = exports.isTextarea = exports.isHint = exports.isSlider = exports.isSteps = exports.isTabs = exports.isTag = exports.isSelect = exports.isRadio = exports.isRadioGroup = exports.isModal = exports.isNumberInput = exports.isDatepicker = exports.isCheckbox = exports.isButton = exports.isAccordion = exports.isLabel = exports.hasTestId = exports.hasClass = exports.isElement = exports.runHighPrioritizedTask = exports.raf = exports.waitAfterIdleCallback = exports.waitAfterFramePaint = exports.rIC = exports.deepReady = void 0;
var deepReady = function (el, full) {
    if (full === void 0) { full = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var element, stencilEl;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    element = el;
                    if (!element) return [3 /*break*/, 4];
                    if (!(element.componentOnReady !== null && element.componentOnReady !== undefined)) return [3 /*break*/, 2];
                    return [4 /*yield*/, element.componentOnReady()];
                case 1:
                    stencilEl = _a.sent();
                    if (!full && stencilEl !== null && stencilEl !== undefined) {
                        return [2 /*return*/];
                    }
                    _a.label = 2;
                case 2: return [4 /*yield*/, Promise.all(Array.from(element.children).map(function (child) { return (0, exports.deepReady)(child, full); }))];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
};
exports.deepReady = deepReady;
var rIC = function (callback) {
    if (typeof window !== 'undefined' && 'requestIdleCallback' in window) {
        ;
        window.requestIdleCallback(callback);
    }
    else {
        setTimeout(callback, 32);
    }
};
exports.rIC = rIC;
var waitAfterFramePaint = function () {
    return new Promise(function (resolve) { return (0, exports.raf)(function () { return (0, exports.runHighPrioritizedTask)(resolve); }); });
};
exports.waitAfterFramePaint = waitAfterFramePaint;
var waitAfterIdleCallback = function () {
    return new Promise(function (resolve) { return (0, exports.rIC)(function () { return (0, exports.runHighPrioritizedTask)(resolve); }); });
};
exports.waitAfterIdleCallback = waitAfterIdleCallback;
var raf = function (h) {
    if (typeof __zone_symbol__requestAnimationFrame === 'function') {
        return __zone_symbol__requestAnimationFrame(h);
    }
    if (typeof requestAnimationFrame === 'function') {
        return requestAnimationFrame(h);
    }
    return setTimeout(h);
};
exports.raf = raf;
var runHighPrioritizedTask = function (callback) {
    if (typeof window !== 'undefined' && 'MessageChannel' in window) {
        var messageChannel = new window.MessageChannel();
        messageChannel.port1.onmessage = callback;
        messageChannel.port2.postMessage(undefined);
    }
    else {
        setTimeout(callback, 32);
    }
};
exports.runHighPrioritizedTask = runHighPrioritizedTask;
var isElement = function (el, name) {
    return typeof el === 'object' && el.length > 0 && el[0].nodeName === name;
};
exports.isElement = isElement;
var hasClass = function (el, name) {
    return typeof el === 'object' && el.length > 0 && el.hasClass(name);
};
exports.hasClass = hasClass;
var hasTestId = function (el, testId) {
    if (typeof el === 'object' && el.length > 0) {
        var dataTestId = el.data('testid');
        return dataTestId === testId;
    }
    return false;
};
exports.hasTestId = hasTestId;
var isLabel = function (el) { return (0, exports.isElement)(el, 'LABEL'); };
exports.isLabel = isLabel;
var isAccordion = function (el) { return (0, exports.isElement)(el, 'BAL-ACCORDION'); };
exports.isAccordion = isAccordion;
var isButton = function (el) { return (0, exports.isElement)(el, 'BAL-BUTTON'); };
exports.isButton = isButton;
var isCheckbox = function (el) { return (0, exports.isElement)(el, 'BAL-CHECKBOX'); };
exports.isCheckbox = isCheckbox;
var isDatepicker = function (el) { return (0, exports.isElement)(el, 'BAL-DATEPICKER'); };
exports.isDatepicker = isDatepicker;
var isNumberInput = function (el) { return (0, exports.isElement)(el, 'BAL-NUMBER-INPUT'); };
exports.isNumberInput = isNumberInput;
var isModal = function (el) { return (0, exports.isElement)(el, 'BAL-MODAL'); };
exports.isModal = isModal;
var isRadioGroup = function (el) { return (0, exports.isElement)(el, 'BAL-RADIO-GROUP'); };
exports.isRadioGroup = isRadioGroup;
var isRadio = function (el) { return (0, exports.isElement)(el, 'BAL-RADIO'); };
exports.isRadio = isRadio;
var isSelect = function (el) { return (0, exports.isElement)(el, 'BAL-SELECT'); };
exports.isSelect = isSelect;
var isTag = function (el) { return (0, exports.isElement)(el, 'BAL-TAG'); };
exports.isTag = isTag;
var isTabs = function (el) { return (0, exports.isElement)(el, 'BAL-TABS'); };
exports.isTabs = isTabs;
var isSteps = function (el) { return (0, exports.isElement)(el, 'BAL-STEPS'); };
exports.isSteps = isSteps;
var isSlider = function (el) { return (0, exports.isElement)(el, 'BAL-INPUT-SLIDER'); };
exports.isSlider = isSlider;
var isHint = function (el) { return (0, exports.isElement)(el, 'BAL-HINT'); };
exports.isHint = isHint;
var isTextarea = function (el) { return (0, exports.isElement)(el, 'BAL-TEXTAREA'); };
exports.isTextarea = isTextarea;
var isCardTitle = function (el) { return (0, exports.isElement)(el, 'BAL-CARD-TITLE'); };
exports.isCardTitle = isCardTitle;
var isHeading = function (el) { return (0, exports.isElement)(el, 'BAL-HEADING'); };
exports.isHeading = isHeading;
var isText = function (el) { return (0, exports.isElement)(el, 'BAL-TEXT'); };
exports.isText = isText;
var isInputStepper = function (el) { return (0, exports.isElement)(el, 'BAL-INPUT-STEPPER'); };
exports.isInputStepper = isInputStepper;
var isInput = function (el) { return (0, exports.isElement)(el, 'BAL-INPUT'); };
exports.isInput = isInput;
var isInputDate = function (el) { return (0, exports.isElement)(el, 'BAL-INPUT-DATE'); };
exports.isInputDate = isInputDate;
/**
 * Executes a command on a child element and wraps back to the main element/component
 */
var wrapOptions = function (options) { return (__assign({ log: false }, options)); };
exports.wrapOptions = wrapOptions;
var wrapCommand = function (displayName, element, message, fn) {
    return function (selector) {
        return cy
            .wrapComponent(element, { log: false })
            .waitForComponents()
            .find(selector, { log: false })
            .then(function ($el) {
            Cypress.log({
                type: 'parent',
                $el: $el,
                displayName: displayName,
                message: message,
            });
            return fn($el);
        })
            .wrapComponent(element, { log: false });
    };
};
exports.wrapCommand = wrapCommand;
var shouldLog = function (options) { return options === undefined || options.log !== false; };
exports.shouldLog = shouldLog;
var log = function (displayName, message, $el, options) {
    if (message === void 0) { message = ''; }
    if ((0, exports.shouldLog)(options)) {
        Cypress.log({
            type: 'parent',
            $el: $el,
            displayName: displayName,
            message: message,
        });
    }
};
exports.log = log;
var areComponentsReady = function ($el) {
    var queue = [];
    for (var index = 0; index < $el.length; index++) {
        var element = $el[index];
        queue.push((0, exports.deepReady)(element, true));
    }
    return Promise.all(queue);
};
exports.areComponentsReady = areComponentsReady;
var testOnPlatforms = function (platforms, fn) {
    var _loop_1 = function (index) {
        var platform = platforms[index];
        context("on ".concat(platform), function () {
            beforeEach(function () { return cy.platform(platform); });
            fn(platform);
        });
    };
    for (var index = 0; index < platforms.length; index++) {
        _loop_1(index);
    }
};
exports.testOnPlatforms = testOnPlatforms;
function checkAriaLabel(element, label) {
    if (label === undefined || label === null || label === '') {
        return true;
    }
    var ariaLabel = Cypress.$(element).attr('aria-label');
    var title = Cypress.$(element).attr('title');
    var text = Cypress.$(element).text().trim();
    return text === label.trim() || ariaLabel === label.trim() || title === label.trim();
}
exports.checkAriaLabel = checkAriaLabel;
