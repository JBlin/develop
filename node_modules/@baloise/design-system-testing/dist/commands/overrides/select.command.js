"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = require("../helpers");
var selectors_1 = require("../../selectors");
var selectors_util_1 = require("../../selectors/selectors.util");
Cypress.Commands.overwrite('select', function (originalFn, element, values, options) {
    if ((0, helpers_1.isSelect)(element)) {
        var valueArray = [];
        if (typeof values === 'string') {
            valueArray.push(values);
        }
        else {
            valueArray = __spreadArray([], values, true);
        }
        if (valueArray.length === 0) {
            return cy.wrap(element).clear();
        }
        var selectContext = [];
        for (var index = 0; index < valueArray.length; index++) {
            var val = valueArray[index];
            selectContext.push("".concat(selectors_1.selectors.select.options, "[data-label=\"").concat(val, "\"]"));
            selectContext.push("".concat(selectors_1.selectors.select.options, "[data-value=\"").concat(val, "\"]"));
        }
        return cy
            .wrap(element, { log: false })
            .find(selectContext.join(', '))
            .click({ multiple: values.length > 1 })
            .wrap(element, { log: false });
    }
    if ((0, helpers_1.isTabs)(element)) {
        if (typeof values === 'string') {
            return cy
                .wrap(element, { log: false })
                .find((0, selectors_util_1.byDataSelectors)(selectors_1.selectors.tabs.item, ['label', 'value', 'index'], values), { log: false })
                .click()
                .wrap(element, { log: false });
        }
    }
    if ((0, helpers_1.isSteps)(element)) {
        if (typeof values === 'string') {
            return cy
                .wrap(element, { log: false })
                .find((0, selectors_util_1.byDataSelectors)(selectors_1.selectors.steps.option, ['label', 'value', 'index'], values), { log: false })
                .click()
                .wrap(element, { log: false });
        }
    }
    return originalFn(element, values, options);
});
