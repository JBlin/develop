"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = require("../helpers");
var index_1 = require("../../selectors/index");
var shouldAndAndCommand = function (originalFn, element, condition, key, value, options) {
    if ((0, helpers_1.isAccordion)(element)) {
        if (['be.disabled', 'not.be.disabled', 'be.focused', 'not.be.focused'].includes(condition)) {
            return originalFn(element.find(index_1.selectors.accordion.trigger, { log: false }), condition, key, value, options);
        }
    }
    if ((0, helpers_1.isButton)(element)) {
        if (['be.disabled', 'not.be.disabled', 'be.focused', 'not.be.focused'].includes(condition)) {
            return originalFn(element.find(index_1.selectors.button.native, { log: false }), condition, key, value, options);
        }
    }
    if ((0, helpers_1.isCheckbox)(element) || (0, helpers_1.isRadio)(element) || (0, helpers_1.hasClass)(element, 'bal-radio-checkbox__label')) {
        if ((0, helpers_1.isLabel)(element)) {
            element = element.closest((0, helpers_1.isCheckbox)(element) ? '<bal-checkbox>' : '<bal-radio>', { log: false });
        }
        if ('be.checked' === condition) {
            return originalFn(element, 'have.attr', 'aria-checked', 'true', options);
        }
        if ('not.be.checked' === condition) {
            return originalFn(element, 'have.attr', 'aria-checked', 'false', options);
        }
        if ('be.disabled' === condition) {
            return originalFn(element, 'have.attr', 'aria-disabled', 'true', options);
        }
        if ('not.be.disabled' === condition) {
            return originalFn(element, 'not.have.attr', 'aria-disabled', options);
        }
        if ('be.focused' === condition) {
            return originalFn(element, 'have.attr', 'aria-focused', 'true', options);
        }
        if ('not.be.focused' === condition) {
            return originalFn(element, 'not.have.attr', 'aria-focused', options);
        }
    }
    if ((0, helpers_1.isInputStepper)(element)) {
        if ('be.disabled' === condition) {
            return originalFn(element, 'have.attr', 'aria-disabled', 'true', options);
        }
        if ('not.be.disabled' === condition) {
            return originalFn(element, 'not.have.attr', 'aria-disabled', options);
        }
        if ('be.focused' === condition) {
            return originalFn(element.find('input'), condition, key, value, options);
        }
        if ('not.be.focused' === condition) {
            return originalFn(element.find('input'), condition, key, value, options);
        }
        if ('have.value' === condition) {
            return originalFn(element.find('input'), condition, key, value, options);
        }
        if ('not.have.value' === condition) {
            return originalFn(element.find('input'), condition, key, value, options);
        }
    }
    if ((0, helpers_1.isDatepicker)(element)) {
        switch (condition) {
            case 'have.focus':
            case 'not.have.focus':
            case 'have.value':
            case 'not.have.value':
            case 'be.disabled':
            case 'not.be.disabled':
                return originalFn(element.find(index_1.selectors.datepicker.input, { log: false }), condition, key, value, options);
        }
    }
    if ((0, helpers_1.isInput)(element)) {
        if (['be.disabled', 'not.be.disabled', 'be.focused', 'not.be.focused', 'have.value', 'not.have.value'].includes(condition)) {
            return originalFn(element.find(index_1.selectors.input.native, { log: false }), condition, key, value, options);
        }
    }
    if ((0, helpers_1.isInputDate)(element)) {
        if (['be.disabled', 'not.be.disabled', 'be.focused', 'not.be.focused', 'have.value', 'not.have.value'].includes(condition)) {
            return originalFn(Cypress.$(element[0]).find(index_1.selectors.dateInput.native), condition, key, value, options);
        }
    }
    if ((0, helpers_1.isNumberInput)(element)) {
        if (['be.disabled', 'not.be.disabled', 'be.focused', 'not.be.focused', 'have.value', 'not.have.value'].includes(condition)) {
            return originalFn(element.find(index_1.selectors.numberInput.native, { log: false }), condition, key, value, options);
        }
    }
    if ((0, helpers_1.isTextarea)(element)) {
        if (['be.disabled', 'not.be.disabled', 'be.focused', 'not.be.focused', 'have.value', 'not.have.value'].includes(condition)) {
            return originalFn(element.find(index_1.selectors.textarea.native, { log: false }), condition, key, value, options);
        }
    }
    if ((0, helpers_1.isSlider)(element)) {
        if (['be.disabled', 'not.be.disabled', 'be.focused', 'not.be.focused', 'have.value', 'not.have.value'].includes(condition)) {
            return originalFn(element.find(index_1.selectors.slider.native, { log: false }), condition, key, value, options);
        }
    }
    if ((0, helpers_1.isSelect)(element)) {
        switch (condition) {
            case 'have.focus':
            case 'not.have.focus':
            case 'be.disabled':
            case 'not.be.disabled':
                return originalFn(element.find(index_1.selectors.select.input, { log: false }), condition, key, value, options);
            case 'have.value':
                if (typeof key === 'string') {
                    return originalFn(element.find(index_1.selectors.select.input, { log: false }), condition, key, value, options);
                }
                return originalFn(element, 'have.attr', 'data-value', key.join(','), value);
            case 'not.have.value':
                if (typeof key === 'string') {
                    return originalFn(element.find(index_1.selectors.select.input, { log: false }), condition, key, value, options);
                }
                return originalFn(element, 'not.have.attr', 'data-value', key.join(','), value);
        }
    }
    if ((0, helpers_1.isTabs)(element)) {
        switch (condition) {
            case 'have.value':
                return originalFn(element, 'have.attr', 'data-label', key, value);
            case 'not.have.value':
                return originalFn(element, 'not.have.attr', 'data-label', key, value);
        }
    }
    if ((0, helpers_1.hasTestId)(element, (0, index_1.parseDataTestID)(index_1.selectors.tabs.item))) {
        switch (condition) {
            case 'have.value':
                return originalFn(element, 'have.attr', 'data-label', key, value);
            case 'not.have.value':
                return originalFn(element, 'not.have.attr', 'data-label', key, value);
            case 'be.disabled':
                return originalFn(element, 'have.attr', 'aria-disabled', 'true');
            case 'not.be.disabled':
                return originalFn(element, 'not.have.attr', 'aria-disabled', 'false');
        }
    }
    if ((0, helpers_1.isSteps)(element)) {
        switch (condition) {
            case 'have.value':
                return originalFn(element, 'have.attr', 'data-label', key, value);
            case 'not.have.value':
                return originalFn(element, 'not.have.attr', 'data-label', key, value);
        }
    }
    if ((0, helpers_1.hasTestId)(element, (0, index_1.parseDataTestID)(index_1.selectors.steps.option))) {
        switch (condition) {
            case 'have.value':
                return originalFn(element, 'have.attr', 'data-label', key, value);
            case 'not.have.value':
                return originalFn(element, 'not.have.attr', 'data-label', key, value);
            case 'be.disabled':
                return originalFn(element, 'have.attr', 'aria-disabled', 'true');
            case 'not.be.disabled':
                return originalFn(element, 'not.have.attr', 'aria-disabled', 'false');
        }
    }
    return originalFn(element, condition, key, value, options);
};
Cypress.Commands.overwrite('should', shouldAndAndCommand);
Cypress.Commands.overwrite('and', shouldAndAndCommand);
