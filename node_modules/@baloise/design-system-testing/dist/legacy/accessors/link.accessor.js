"use strict";
/// <reference types="cypress" />
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkAccessor = exports.LinkHrefEqualsAssertableMixin = exports.LinkHrefContainsAssertableMixin = exports.LinkWithoutTargetAttribute = exports.LinkWithTargetAttribute = exports.LinkClickableMixin = exports.Target = void 0;
var helpers_1 = require("../../commands/helpers");
var andable_1 = require("./mixins/andable");
var attachable_1 = require("./mixins/attachable");
var attributable_1 = require("./mixins/attributable");
var blurable_1 = require("./mixins/blurable");
var clickable_1 = require("./mixins/clickable");
var containable_1 = require("./mixins/containable");
var disableable_1 = require("./mixins/disableable");
var eachable_1 = require("./mixins/eachable");
var existable_1 = require("./mixins/existable");
var findable_1 = require("./mixins/findable");
var invokable_1 = require("./mixins/invokable");
var lengthable_1 = require("./mixins/lengthable");
var mixins_1 = require("./mixins/mixins");
var nthSelectable_1 = require("./mixins/nthSelectable");
var shouldable_1 = require("./mixins/shouldable");
var thenable_1 = require("./mixins/thenable");
var urlable_1 = require("./mixins/urlable");
var visible_1 = require("./mixins/visible");
var waitable_1 = require("./mixins/waitable");
var Target;
(function (Target) {
    Target["newTab"] = "_blank";
    Target["sameTab"] = "_self";
    Target["parent"] = "_parent";
    Target["top"] = "_top";
})(Target = exports.Target || (exports.Target = {}));
var getLink = function (element) {
    return element.then(function (el) { return ((0, helpers_1.isButton)(el) ? element.find('a') : element); });
};
var LinkClickableMixin = function (_a) {
    var element = _a.element, creator = _a.creator;
    return ({
        clickLink: function () {
            getLink(element).click();
            return creator();
        },
    });
};
exports.LinkClickableMixin = LinkClickableMixin;
var LinkWithTargetAttribute = function (_a) {
    var element = _a.element, creator = _a.creator;
    return ({
        assertLinkOpeningTarget: function (target) {
            getLink(element).should('have.attr', 'target', target);
            return creator();
        },
    });
};
exports.LinkWithTargetAttribute = LinkWithTargetAttribute;
var LinkWithoutTargetAttribute = function (_a) {
    var element = _a.element, creator = _a.creator;
    return ({
        assertLinkWithoutTarget: function () {
            getLink(element).should('not.have.attr', 'target');
            return creator();
        },
    });
};
exports.LinkWithoutTargetAttribute = LinkWithoutTargetAttribute;
var LinkHrefContainsAssertableMixin = function (_a) {
    var element = _a.element, creator = _a.creator;
    return ({
        assertHrefContains: function (href) {
            getLink(element).should('have.attr', 'href').and('contain', href);
            return creator();
        },
    });
};
exports.LinkHrefContainsAssertableMixin = LinkHrefContainsAssertableMixin;
var LinkHrefEqualsAssertableMixin = function (_a) {
    var element = _a.element, creator = _a.creator;
    return ({
        assertHrefEquals: function (href) {
            getLink(element).should('have.attr', 'href', href);
            return creator();
        },
    });
};
exports.LinkHrefEqualsAssertableMixin = LinkHrefEqualsAssertableMixin;
exports.LinkAccessor = (0, mixins_1.createAccessor)(andable_1.AndableMixin, blurable_1.BlurableMixin, clickable_1.ClickableMixin, exports.LinkWithTargetAttribute, exports.LinkWithoutTargetAttribute, exports.LinkHrefContainsAssertableMixin, exports.LinkHrefEqualsAssertableMixin, existable_1.ExistableMixin, shouldable_1.ShouldableMixin, containable_1.ContainableMixin, disableable_1.DisableableMixin, visible_1.VisibleMixin, nthSelectable_1.NthSelectableMixin, exports.LinkClickableMixin, attributable_1.AttributableMixin, urlable_1.UrlableMixin, findable_1.FindableMixin, waitable_1.WaitableMixin, invokable_1.InvokableMixin, thenable_1.ThenableMixin, lengthable_1.LengthableMixin, eachable_1.EachableMixin, attachable_1.AttachableMixin);
