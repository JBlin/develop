"use strict";
/// <reference types="cypress" />
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropDownAccessor = exports.SiblingDropDownContainableMixin = exports.DropDownContainableMixin = exports.SiblingDropDownAssertableOptionsMixin = exports.DropDownAssertableOptionsMixin = exports.SiblingDropDownSelectableMixin = exports.DropDownSelectableMixin = exports.DropDownClickableMixin = void 0;
var andable_1 = require("./mixins/andable");
var attributable_1 = require("./mixins/attributable");
var blurable_1 = require("./mixins/blurable");
var disableable_1 = require("./mixins/disableable");
var eachable_1 = require("./mixins/eachable");
var existable_1 = require("./mixins/existable");
var findable_1 = require("./mixins/findable");
var invokable_1 = require("./mixins/invokable");
var lengthable_1 = require("./mixins/lengthable");
var mixins_1 = require("./mixins/mixins");
var nthSelectable_1 = require("./mixins/nthSelectable");
var shouldable_1 = require("./mixins/shouldable");
var thenable_1 = require("./mixins/thenable");
var urlable_1 = require("./mixins/urlable");
var visible_1 = require("./mixins/visible");
var waitable_1 = require("./mixins/waitable");
var DropDownClickableMixin = function (_a) {
    var selector = _a.selector, creator = _a.creator;
    return ({
        click: function (options) {
            cy.get(selector).click(options);
            return creator();
        },
    });
};
exports.DropDownClickableMixin = DropDownClickableMixin;
var DropDownSelectableMixin = function (_a) {
    var selector = _a.selector, creator = _a.creator;
    return ({
        select: function (index) {
            cy.get(selector).balSelectFindOptions().eq(index).click();
            return creator();
        },
        assertIsSelected: function () {
            throw new Error('Please use contains method');
        },
    });
};
exports.DropDownSelectableMixin = DropDownSelectableMixin;
function SiblingDropDownSelectableMixin() {
    return function (_a) {
        var selector = _a.selector, creator = _a.creator;
        return ({
            select: function (index) {
                cy.get(selector).balSelectFindOptions().eq(index).click();
                return creator();
            },
            assertIsSelected: function () {
                throw new Error('Please use contains method');
            },
        });
    };
}
exports.SiblingDropDownSelectableMixin = SiblingDropDownSelectableMixin;
var DropDownAssertableOptionsMixin = function (_a) {
    var selector = _a.selector, creator = _a.creator;
    return ({
        assertOptions: function () {
            var options = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                options[_i] = arguments[_i];
            }
            cy.get(selector).balSelectShouldHaveOptions(options, 'value');
            return creator();
        },
    });
};
exports.DropDownAssertableOptionsMixin = DropDownAssertableOptionsMixin;
function SiblingDropDownAssertableOptionsMixin() {
    return function (_a) {
        var selector = _a.selector, creator = _a.creator;
        return ({
            assertOptions: function () {
                var options = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    options[_i] = arguments[_i];
                }
                cy.get(selector).balSelectShouldHaveOptions(options, 'value');
                return creator();
            },
        });
    };
}
exports.SiblingDropDownAssertableOptionsMixin = SiblingDropDownAssertableOptionsMixin;
var DropDownContainableMixin = function (_a) {
    var selector = _a.selector, creator = _a.creator;
    return ({
        contains: function (content) {
            cy.get(selector).contains(content);
            return creator();
        },
    });
};
exports.DropDownContainableMixin = DropDownContainableMixin;
function SiblingDropDownContainableMixin() {
    return function (_a) {
        var selector = _a.selector, creator = _a.creator;
        return ({
            contains: function (content) {
                cy.get(selector).contains(content);
                return creator();
            },
        });
    };
}
exports.SiblingDropDownContainableMixin = SiblingDropDownContainableMixin;
exports.DropDownAccessor = (0, mixins_1.createAccessor)(andable_1.AndableMixin, blurable_1.BlurableMixin, exports.DropDownClickableMixin, exports.DropDownSelectableMixin, exports.DropDownContainableMixin, exports.DropDownAssertableOptionsMixin, disableable_1.DisableableMixin, shouldable_1.ShouldableMixin, visible_1.VisibleMixin, nthSelectable_1.NthSelectableMixin, attributable_1.AttributableMixin, urlable_1.UrlableMixin, findable_1.FindableMixin, waitable_1.WaitableMixin, existable_1.ExistableMixin, thenable_1.ThenableMixin, invokable_1.InvokableMixin, lengthable_1.LengthableMixin, eachable_1.EachableMixin);
