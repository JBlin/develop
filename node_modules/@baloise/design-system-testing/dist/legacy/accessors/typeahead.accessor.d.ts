import { Andable } from './mixins/andable';
import { Attributable } from './mixins/attributable';
import { Blurable } from './mixins/blurable';
import { Clearable } from './mixins/clearable';
import { Clickable } from './mixins/clickable';
import { Containable } from './mixins/containable';
import { Eachable } from './mixins/eachable';
import { Findable } from './mixins/findable';
import { Invokable } from './mixins/invokable';
import { Lengthable } from './mixins/lengthable';
import { Accessor } from './mixins/mixins';
import { NthSelectable } from './mixins/nthSelectable';
import { Selectable } from './mixins/selectable';
import { Shouldable } from './mixins/shouldable';
import { Thenable } from './mixins/thenable';
import { Typeable } from './mixins/typeable';
import { Urlable } from './mixins/urlable';
import { Waitable } from './mixins/waitable';
export interface TypeaheadAccessorType extends Andable<TypeaheadAccessorType>, Clickable<TypeaheadAccessorType>, Typeable<TypeaheadAccessorType>, Blurable<TypeaheadAccessorType>, Clearable<TypeaheadAccessorType>, Containable<TypeaheadAccessorType>, Selectable<TypeaheadAccessorType>, Shouldable<TypeaheadAccessorType>, NthSelectable<TypeaheadAccessorType>, Attributable<TypeaheadAccessorType>, Urlable<TypeaheadAccessorType>, Findable<TypeaheadAccessorType>, Waitable<TypeaheadAccessorType>, Invokable<TypeaheadAccessorType>, Thenable<TypeaheadAccessorType>, Lengthable<TypeaheadAccessorType>, Eachable<TypeaheadAccessorType> {
    assertValue(value: any): TypeaheadAccessorType;
    contains(content: string | number | RegExp): TypeaheadAccessorType;
    assertError(name: string, error: string): TypeaheadAccessorType;
    assertNoError(name: string): TypeaheadAccessorType;
    assertOptions(...options: string[]): TypeaheadAccessorType;
}
export declare const TypeaheadAccessor: Accessor<TypeaheadAccessorType>;
