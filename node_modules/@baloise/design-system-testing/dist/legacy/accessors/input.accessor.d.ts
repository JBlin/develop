import { Andable } from './mixins/andable';
import { Attachable } from './mixins/attachable';
import { Attributable } from './mixins/attributable';
import { Blurable } from './mixins/blurable';
import { Clearable } from './mixins/clearable';
import { Clickable } from './mixins/clickable';
import { Containable } from './mixins/containable';
import { Disableable } from './mixins/disableable';
import { Eachable } from './mixins/eachable';
import { Existable } from './mixins/existable';
import { Findable } from './mixins/findable';
import { Invokable } from './mixins/invokable';
import { Lengthable } from './mixins/lengthable';
import { Accessor, Mixin } from './mixins/mixins';
import { NthSelectable } from './mixins/nthSelectable';
import { Shouldable } from './mixins/shouldable';
import { Thenable } from './mixins/thenable';
import { Typeable } from './mixins/typeable';
import { Urlable } from './mixins/urlable';
import { Visible } from './mixins/visible';
import { Waitable } from './mixins/waitable';
interface InputAccessorType extends Andable<InputAccessorType>, Clickable<InputAccessorType>, Typeable<InputAccessorType>, Blurable<InputAccessorType>, Clearable<InputAccessorType>, Visible<InputAccessorType>, Containable<InputAccessorType>, Existable<InputAccessorType>, Shouldable<InputAccessorType>, Disableable<InputAccessorType>, NthSelectable<InputAccessorType>, Attributable<InputAccessorType>, Urlable<InputAccessorType>, Findable<InputAccessorType>, Waitable<InputAccessorType>, Invokable<InputAccessorType>, Thenable<InputAccessorType>, Lengthable<InputAccessorType>, Eachable<InputAccessorType>, Attachable<InputAccessorType> {
    assertValue(value: any): InputAccessorType;
    contains(content: string | number | RegExp): InputAccessorType;
    assertError(error: string): InputAccessorType;
    assertNoError(): InputAccessorType;
}
export declare const InputValueAssertableMixin: Mixin;
export declare const InputAccessor: Accessor<InputAccessorType>;
export {};
