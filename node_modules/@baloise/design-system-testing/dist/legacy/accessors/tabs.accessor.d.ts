/// <reference types="cypress" />
import { Andable } from './mixins/andable';
import { Attributable } from './mixins/attributable';
import { Clickable } from './mixins/clickable';
import { Containable } from './mixins/containable';
import { Disableable } from './mixins/disableable';
import { Eachable } from './mixins/eachable';
import { Existable } from './mixins/existable';
import { Findable } from './mixins/findable';
import { Invokable } from './mixins/invokable';
import { Lengthable } from './mixins/lengthable';
import { Accessor, Mixin } from './mixins/mixins';
import { NthSelectable } from './mixins/nthSelectable';
import { Selectable } from './mixins/selectable';
import { Shouldable } from './mixins/shouldable';
import { Thenable } from './mixins/thenable';
import { Urlable } from './mixins/urlable';
import { Waitable } from './mixins/waitable';
interface TabsAccessorType extends Andable<TabsAccessorType>, Selectable<TabsAccessorType>, Containable<TabsAccessorType>, Clickable<TabsAccessorType>, Existable<TabsAccessorType>, Shouldable<TabsAccessorType>, Disableable<TabsAccessorType>, NthSelectable<TabsAccessorType>, Attributable<TabsAccessorType>, Urlable<TabsAccessorType>, Findable<TabsAccessorType>, Waitable<TabsAccessorType>, Invokable<TabsAccessorType>, Thenable<TabsAccessorType>, Lengthable<TabsAccessorType>, Eachable<TabsAccessorType> {
    assertVisible(text: string): TabsAccessorType;
    select(index: number, options?: Partial<Cypress.ClickOptions>): TabsAccessorType;
    assertIsSelected(label: string): TabsAccessorType;
}
export declare const TabsAssertVisibleMixin: Mixin;
export declare const TabsAccessor: Accessor<TabsAccessorType>;
export {};
