"use strict";
/// <reference types="cypress" />
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableAccessor = exports.TableRowContainableMixin = exports.TableRowClickableMixin = void 0;
var andable_1 = require("./mixins/andable");
var attachable_1 = require("./mixins/attachable");
var attributable_1 = require("./mixins/attributable");
var clickable_1 = require("./mixins/clickable");
var containable_1 = require("./mixins/containable");
var disableable_1 = require("./mixins/disableable");
var eachable_1 = require("./mixins/eachable");
var existable_1 = require("./mixins/existable");
var findable_1 = require("./mixins/findable");
var invokable_1 = require("./mixins/invokable");
var lengthable_1 = require("./mixins/lengthable");
var mixins_1 = require("./mixins/mixins");
var nthSelectable_1 = require("./mixins/nthSelectable");
var shouldable_1 = require("./mixins/shouldable");
var thenable_1 = require("./mixins/thenable");
var urlable_1 = require("./mixins/urlable");
var visible_1 = require("./mixins/visible");
var waitable_1 = require("./mixins/waitable");
var TableRowClickableMixin = function (_a) {
    var element = _a.element, creator = _a.creator;
    return ({
        clickOnRow: function (index, options) {
            var row = element.find('tr').eq(index);
            row.click(options);
            return creator();
        },
    });
};
exports.TableRowClickableMixin = TableRowClickableMixin;
var TableRowContainableMixin = function (_a) {
    var element = _a.element, creator = _a.creator;
    return ({
        rowContains: function (index, content) {
            var row = element.find('tr').eq(index);
            row.contains(content);
            return creator();
        },
    });
};
exports.TableRowContainableMixin = TableRowContainableMixin;
exports.TableAccessor = (0, mixins_1.createAccessor)(andable_1.AndableMixin, exports.TableRowClickableMixin, exports.TableRowContainableMixin, existable_1.ExistableMixin, containable_1.ContainableMixin, clickable_1.ClickableMixin, shouldable_1.ShouldableMixin, disableable_1.DisableableMixin, visible_1.VisibleMixin, nthSelectable_1.NthSelectableMixin, attributable_1.AttributableMixin, urlable_1.UrlableMixin, waitable_1.WaitableMixin, findable_1.FindableMixin, eachable_1.EachableMixin, invokable_1.InvokableMixin, thenable_1.ThenableMixin, lengthable_1.LengthableMixin, attachable_1.AttachableMixin);
