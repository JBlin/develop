"use strict";
/// <reference types="cypress" />
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListAccessor = exports.ListAssertableMixin = exports.ListSelectableMixin = void 0;
var andable_1 = require("./mixins/andable");
var attributable_1 = require("./mixins/attributable");
var clickable_1 = require("./mixins/clickable");
var containable_1 = require("./mixins/containable");
var disableable_1 = require("./mixins/disableable");
var eachable_1 = require("./mixins/eachable");
var existable_1 = require("./mixins/existable");
var findable_1 = require("./mixins/findable");
var invokable_1 = require("./mixins/invokable");
var lengthable_1 = require("./mixins/lengthable");
var mixins_1 = require("./mixins/mixins");
var nthSelectable_1 = require("./mixins/nthSelectable");
var shouldable_1 = require("./mixins/shouldable");
var thenable_1 = require("./mixins/thenable");
var urlable_1 = require("./mixins/urlable");
var visible_1 = require("./mixins/visible");
var waitable_1 = require("./mixins/waitable");
var ListSelectableMixin = function (_a) {
    var element = _a.element, creator = _a.creator;
    return ({
        select: function (index, options) {
            element.balPaginationFindPages().eq(index).click(options);
            return creator();
        },
    });
};
exports.ListSelectableMixin = ListSelectableMixin;
var ListAssertableMixin = function (_a) {
    var element = _a.element, creator = _a.creator;
    return ({
        assertIsSelected: function (number) {
            element.balPaginationFindCurrentPage().contains(number);
            return creator();
        },
    });
};
exports.ListAssertableMixin = ListAssertableMixin;
exports.ListAccessor = (0, mixins_1.createAccessor)(andable_1.AndableMixin, exports.ListSelectableMixin, exports.ListAssertableMixin, containable_1.ContainableMixin, existable_1.ExistableMixin, clickable_1.ClickableMixin, disableable_1.DisableableMixin, shouldable_1.ShouldableMixin, visible_1.VisibleMixin, nthSelectable_1.NthSelectableMixin, attributable_1.AttributableMixin, urlable_1.UrlableMixin, waitable_1.WaitableMixin, findable_1.FindableMixin, invokable_1.InvokableMixin, thenable_1.ThenableMixin, lengthable_1.LengthableMixin, eachable_1.EachableMixin);
