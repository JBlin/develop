const o="bal-focused",t=["Tab","ArrowDown","Space","Escape"," ","Shift","Enter","ArrowLeft","ArrowRight","ArrowUp","Home","End"],e=e=>{let s=[],c=!0;const u=e?e.shadowRoot:document,n=e||document.body,r=t=>{s.forEach((t=>t.classList.remove(o))),t.forEach((t=>t.classList.add(o))),s=t},d=()=>{c=!1,r([])},f=o=>{c=t.includes(o.key),c||r([])},w=o=>{if(c&&void 0!==o.composedPath){const t=o.composedPath().filter((o=>!!o.classList&&o.classList.contains("bal-focusable")));r(t)}},a=()=>{u.activeElement===n&&r([])};return u.addEventListener("keydown",f),u.addEventListener("focusin",w),u.addEventListener("focusout",a),u.addEventListener("touchstart",d),u.addEventListener("mousedown",d),{destroy:()=>{u.removeEventListener("keydown",f),u.removeEventListener("focusin",w),u.removeEventListener("focusout",a),u.removeEventListener("touchstart",d),u.removeEventListener("mousedown",d)},setFocus:r}};export{t as FOCUS_KEYS,e as startFocusVisible}